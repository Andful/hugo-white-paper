/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bibtex-parse/bibtex-parse.js":
/*!***************************************************!*\
  !*** ./node_modules/bibtex-parse/bibtex-parse.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n}(this, (function (exports) { 'use strict';\n\n  var parser = /*\n   * Generated by PEG.js 0.10.0.\n   *\n   * http://pegjs.org/\n   */\n  (function() {\n\n    function peg$subclass(child, parent) {\n      function ctor() { this.constructor = child; }\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n    }\n\n    function peg$SyntaxError(message, expected, found, location) {\n      this.message  = message;\n      this.expected = expected;\n      this.found    = found;\n      this.location = location;\n      this.name     = \"SyntaxError\";\n\n      if (typeof Error.captureStackTrace === \"function\") {\n        Error.captureStackTrace(this, peg$SyntaxError);\n      }\n    }\n\n    peg$subclass(peg$SyntaxError, Error);\n\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n            literal: function(expectation) {\n              return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n            },\n\n            \"class\": function(expectation) {\n              var escapedParts = \"\",\n                  i;\n\n              for (i = 0; i < expectation.parts.length; i++) {\n                escapedParts += expectation.parts[i] instanceof Array\n                  ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n                  : classEscape(expectation.parts[i]);\n              }\n\n              return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n            },\n\n            any: function(expectation) {\n              return \"any character\";\n            },\n\n            end: function(expectation) {\n              return \"end of input\";\n            },\n\n            other: function(expectation) {\n              return expectation.description;\n            }\n          };\n\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n\n      function literalEscape(s) {\n        return s\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\"/g,  '\\\\\"')\n          .replace(/\\0/g, '\\\\0')\n          .replace(/\\t/g, '\\\\t')\n          .replace(/\\n/g, '\\\\n')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n          .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n      }\n\n      function classEscape(s) {\n        return s\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\\]/g, '\\\\]')\n          .replace(/\\^/g, '\\\\^')\n          .replace(/-/g,  '\\\\-')\n          .replace(/\\0/g, '\\\\0')\n          .replace(/\\t/g, '\\\\t')\n          .replace(/\\n/g, '\\\\n')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n          .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n      }\n\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n\n      function describeExpected(expected) {\n        var descriptions = new Array(expected.length),\n            i, j;\n\n        for (i = 0; i < expected.length; i++) {\n          descriptions[i] = describeExpectation(expected[i]);\n        }\n\n        descriptions.sort();\n\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n\n          default:\n            return descriptions.slice(0, -1).join(\", \")\n              + \", or \"\n              + descriptions[descriptions.length - 1];\n        }\n      }\n\n      function describeFound(found) {\n        return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n      }\n\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n\n      var peg$FAILED = {},\n\n          peg$startRuleFunctions = { START: peg$parseSTART },\n          peg$startRuleFunction  = peg$parseSTART,\n\n          peg$c0 = function(items) {\n                return items.reduce((memo, item) => {\n                  let last = memo[memo.length - 1];\n                  if (last && last.itemtype === 'comment' && item.itemtype === 'comment') {\n                    last.comment += item.comment; // merge comments together\n                  } else {\n                    memo.push(item);\n                  }\n                  return memo;\n                }, []); \n              },\n          peg$c1 = peg$otherExpectation(\"preamble, entry, string, or comment\"),\n          peg$c2 = function(preamble) { return { itemtype: 'preamble', ...preamble }; },\n          peg$c3 = function(keyval) { return { itemtype: 'string', ...keyval }; },\n          peg$c4 = function(entry) { return { itemtype: 'entry', ...entry }; },\n          peg$c5 = function(comment) { return { itemtype: 'comment', comment }; },\n          peg$c6 = peg$otherExpectation(\"preamble\"),\n          peg$c7 = \"@preamble\",\n          peg$c8 = peg$literalExpectation(\"@preamble\", true),\n          peg$c9 = \"(\",\n          peg$c10 = peg$literalExpectation(\"(\", false),\n          peg$c11 = \")\",\n          peg$c12 = peg$literalExpectation(\")\", false),\n          peg$c13 = function(value) { return { enclosed: 'parentheses', ...value }; },\n          peg$c14 = \"{\",\n          peg$c15 = peg$literalExpectation(\"{\", false),\n          peg$c16 = \"}\",\n          peg$c17 = peg$literalExpectation(\"}\", false),\n          peg$c18 = function(value) { return { enclosed: 'braces', ...value }; },\n          peg$c19 = function(value) { return { enclosed: 'parentheses', value, datatype: 'unenclosed', raw: value }; },\n          peg$c20 = function(value) { return { enclosed: 'braces', value, datatype: 'unenclosed', raw: value }; },\n          peg$c21 = function(value) { return value; },\n          peg$c22 = peg$otherExpectation(\"string\"),\n          peg$c23 = \"@string\",\n          peg$c24 = peg$literalExpectation(\"@string\", true),\n          peg$c25 = function(keyval) { return keyval; },\n          peg$c26 = peg$otherExpectation(\"comment\"),\n          peg$c27 = /^[^@]/,\n          peg$c28 = peg$classExpectation([\"@\"], true, false),\n          peg$c29 = \"@\",\n          peg$c30 = peg$literalExpectation(\"@\", false),\n          peg$c31 = \"comment\",\n          peg$c32 = peg$literalExpectation(\"comment\", true),\n          peg$c33 = /^[^\\n\\r]/,\n          peg$c34 = peg$classExpectation([\"\\n\", \"\\r\"], true, false),\n          peg$c35 = /^[^A-Za-z0-9]/,\n          peg$c36 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"]], true, false),\n          peg$c37 = /^[^{(]/,\n          peg$c38 = peg$classExpectation([\"{\", \"(\"], true, false),\n          peg$c39 = peg$otherExpectation(\"entry\"),\n          peg$c40 = \"preamble\",\n          peg$c41 = peg$literalExpectation(\"preamble\", true),\n          peg$c42 = \"string\",\n          peg$c43 = peg$literalExpectation(\"string\", true),\n          peg$c44 = function(type, body) { return { enclosed: 'braces', ...body }; },\n          peg$c45 = function(type, body) { return { enclosed: 'parentheses', ...body }; },\n          peg$c46 = function(type, body) { return { type: type.toLowerCase(), ...body, raw: text() }; },\n          peg$c47 = \",\",\n          peg$c48 = peg$literalExpectation(\",\", false),\n          peg$c49 = function(key) { return key; },\n          peg$c50 = function(key, first, assignment) { return assignment; },\n          peg$c51 = function(key, first, rest) { return [first, ...rest]; },\n          peg$c52 = function(key, fields) { return { key, fields: fields || [] }; },\n          peg$c53 = peg$otherExpectation(\"assignment\"),\n          peg$c54 = \"=\",\n          peg$c55 = peg$literalExpectation(\"=\", false),\n          peg$c56 = function(name, value) { return value; },\n          peg$c57 = function(name, value) { return { name, ...(value ? value : { value: null, datatype: 'null', raw: '' }) }; },\n          peg$c58 = peg$otherExpectation(\"expression\"),\n          peg$c59 = \"#\",\n          peg$c60 = peg$literalExpectation(\"#\", false),\n          peg$c61 = function(first, value) { return value; },\n          peg$c62 = function(first, rest) { return rest.length > 0 ? { value: [first, ...rest], datatype: 'concatinate', raw: text() } : first; },\n          peg$c63 = peg$otherExpectation(\"literal\"),\n          peg$c64 = \"\\\"\",\n          peg$c65 = peg$literalExpectation(\"\\\"\", false),\n          peg$c66 = function(value) { return { value, datatype: 'quoted',     raw: text() }; },\n          peg$c67 = function(value) { return { value, datatype: 'braced',     raw: text() }; },\n          peg$c68 = function(value) { return { value, datatype: 'number',     raw: text() }; },\n          peg$c69 = function(value) { return { value, datatype: 'identifier', raw: text() }; },\n          peg$c70 = peg$otherExpectation(\"identifier\"),\n          peg$c71 = /^[^=#,{}()[\\] \\t\\n\\r]/,\n          peg$c72 = peg$classExpectation([\"=\", \"#\", \",\", \"{\", \"}\", \"(\", \")\", \"[\", \"]\", \" \", \"\\t\", \"\\n\", \"\\r\"], true, false),\n          peg$c73 = peg$otherExpectation(\"key for assignment\"),\n          peg$c74 = /^[# ]/,\n          peg$c75 = peg$classExpectation([\"#\", \" \"], false, false),\n          peg$c76 = peg$otherExpectation(\"number\"),\n          peg$c77 = /^[0-9]/,\n          peg$c78 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n          peg$c79 = function() { return parseNumber(text()); },\n          peg$c80 = peg$otherExpectation(\"braced value\"),\n          peg$c81 = /^[^{}]/,\n          peg$c82 = peg$classExpectation([\"{\", \"}\"], true, false),\n          peg$c83 = peg$otherExpectation(\"quoted string\"),\n          peg$c84 = /^[^\"{]/,\n          peg$c85 = peg$classExpectation([\"\\\"\", \"{\"], true, false),\n          peg$c86 = \"\\\\\\\\\",\n          peg$c87 = peg$literalExpectation(\"\\\\\\\\\", false),\n          peg$c88 = \"\\\\{\",\n          peg$c89 = peg$literalExpectation(\"\\\\{\", false),\n          peg$c90 = \"\\\\}\",\n          peg$c91 = peg$literalExpectation(\"\\\\}\", false),\n          peg$c92 = \"\\\\\\\"\",\n          peg$c93 = peg$literalExpectation(\"\\\\\\\"\", false),\n          peg$c94 = peg$otherExpectation(\"whitespace\"),\n          peg$c95 = /^[ \\t\\n\\r]/,\n          peg$c96 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n          peg$c97 = peg$otherExpectation(\"end of line\"),\n          peg$c98 = \"\\n\",\n          peg$c99 = peg$literalExpectation(\"\\n\", false),\n          peg$c100 = \"\\r\\n\",\n          peg$c101 = peg$literalExpectation(\"\\r\\n\", false),\n          peg$c102 = \"\\r\",\n          peg$c103 = peg$literalExpectation(\"\\r\", false),\n          peg$c104 = \"\\u2028\",\n          peg$c105 = peg$literalExpectation(\"\\u2028\", false),\n          peg$c106 = \"\\u2029\",\n          peg$c107 = peg$literalExpectation(\"\\u2029\", false),\n          peg$c108 = peg$anyExpectation(),\n\n          peg$currPos          = 0,\n          peg$savedPos         = 0,\n          peg$posDetailsCache  = [{ line: 1, column: 1 }],\n          peg$maxFailPos       = 0,\n          peg$maxFailExpected  = [],\n          peg$silentFails      = 0,\n\n          peg$result;\n\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n\n      function peg$literalExpectation(text, ignoreCase) {\n        return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n      }\n\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n      }\n\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n      }\n\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos], p;\n\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n\n          details = peg$posDetailsCache[p];\n          details = {\n            line:   details.line,\n            column: details.column\n          };\n\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n\n            p++;\n          }\n\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos),\n            endPosDetails   = peg$computePosDetails(endPos);\n\n        return {\n          start: {\n            offset: startPos,\n            line:   startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line:   endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n\n      function peg$fail(expected) {\n        if (peg$currPos < peg$maxFailPos) { return; }\n\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n\n        peg$maxFailExpected.push(expected);\n      }\n\n      function peg$buildStructuredError(expected, found, location) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected, found),\n          expected,\n          found,\n          location\n        );\n      }\n\n      function peg$parseSTART() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseITEM();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseITEM();\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s1);\n        }\n        s0 = s1;\n\n        return s0;\n      }\n\n      function peg$parseITEM() {\n        var s0, s1;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsePREAMBLE();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseSTRING();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c3(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseENTRY();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c4(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseCOMMENT();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c5(s1);\n              }\n              s0 = s1;\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n\n        return s0;\n      }\n\n      function peg$parsePREAMBLE() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c7) {\n          s1 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s4 = peg$c9;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseEXPRESSION();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s8 = peg$c11;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c12); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c13(s6);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 123) {\n                s4 = peg$c14;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c15); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseEXPRESSION();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse_();\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s8 = peg$c16;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s4 = peg$c18(s6);\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s4 = peg$c9;\n                  peg$currPos++;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseBRACED();\n                  if (s5 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s6 = peg$c11;\n                      peg$currPos++;\n                    } else {\n                      s6 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c12); }\n                    }\n                    if (s6 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c19(s5);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n                if (s3 === peg$FAILED) {\n                  s3 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 123) {\n                    s4 = peg$c14;\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                  }\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseBRACED();\n                    if (s5 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s6 = peg$c16;\n                        peg$currPos++;\n                      } else {\n                        s6 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                      }\n                      if (s6 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s4 = peg$c20(s5);\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c21(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseSTRING() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c23) {\n          s1 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s4 = peg$c9;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseASSIGNMENT();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s8 = peg$c11;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c12); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c25(s6);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 123) {\n                s4 = peg$c14;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c15); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseASSIGNMENT();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse_();\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s8 = peg$c16;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s4 = peg$c25(s6);\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c25(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseCOMMENT() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c27.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c27.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s2 = peg$c29;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n              s4 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 123) {\n                  s7 = peg$c14;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseBRACED();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c16;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = [];\n                if (peg$c33.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                }\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  if (peg$c33.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseLINE_END();\n                  if (s7 !== peg$FAILED) {\n                    s6 = [s6, s7];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = [];\n              if (peg$c35.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c36); }\n              }\n              if (s4 !== peg$FAILED) {\n                while (s4 !== peg$FAILED) {\n                  s3.push(s4);\n                  if (peg$c35.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                  }\n                }\n              } else {\n                s3 = peg$FAILED;\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = peg$parseIDENTIFIER();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parse_();\n                  if (s5 !== peg$FAILED) {\n                    if (peg$c37.test(input.charAt(peg$currPos))) {\n                      s6 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s6 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                    }\n                    if (s6 !== peg$FAILED) {\n                      s4 = [s4, s5, s6];\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n          } else {\n            s0 = s1;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseENTRY() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 64) {\n          s1 = peg$c29;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c40) {\n              s3 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c41); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c43); }\n              }\n            }\n          }\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = void 0;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseIDENTIFIER();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 123) {\n                  s6 = peg$c14;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseENTRY_BODY();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s10 = peg$c16;\n                          peg$currPos++;\n                        } else {\n                          s10 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c17); }\n                        }\n                        if (s10 !== peg$FAILED) {\n                          peg$savedPos = s5;\n                          s6 = peg$c44(s3, s8);\n                          s5 = s6;\n                        } else {\n                          peg$currPos = s5;\n                          s5 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n                if (s5 === peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 40) {\n                    s6 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse_();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseENTRY_BODY();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse_();\n                        if (s9 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s10 = peg$c11;\n                            peg$currPos++;\n                          } else {\n                            s10 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n                          }\n                          if (s10 !== peg$FAILED) {\n                            peg$savedPos = s5;\n                            s6 = peg$c45(s3, s8);\n                            s5 = s6;\n                          } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s5;\n                          s5 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c46(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseENTRY_BODY() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseIDENTIFIER();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s4 = peg$c47;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c49(s2);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            s4 = peg$parseASSIGNMENT();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s8 = peg$c47;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseASSIGNMENT();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s7 = peg$c50(s1, s4, s10);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s8 = peg$c47;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseASSIGNMENT();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s6;\n                        s7 = peg$c50(s1, s4, s10);\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c51(s1, s4, s5);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s5 = peg$c47;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                }\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c52(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        return s0;\n      }\n\n      function peg$parseASSIGNMENT() {\n        var s0, s1, s2, s3, s4, s5, s6;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseIDENTIFIER_LEFT();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c54;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseEXPRESSION();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s2;\n                  s3 = peg$c56(s1, s6);\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c57(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseEXPRESSION() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseLITERAL();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s5 = peg$c59;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c60); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLITERAL();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c61(s1, s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 35) {\n                s5 = peg$c59;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseLITERAL();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s4 = peg$c61(s1, s7);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c62(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseLITERAL() {\n        var s0, s1, s2, s3;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s1 = peg$c64;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseQUOTED();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s3 = peg$c64;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c65); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c66(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c14;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseBRACED();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s3 = peg$c16;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c67(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseNUMBER();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c68(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseIDENTIFIER();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c69(s1);\n              }\n              s0 = s1;\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c63); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseIDENTIFIER() {\n        var s0, s1, s2;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c71.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c71.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c72); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c70); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseIDENTIFIER_LEFT() {\n        var s0, s1, s2, s3, s4, s5;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseIDENTIFIER();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = [];\n          if (peg$c74.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c75); }\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              if (peg$c74.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c75); }\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIDENTIFIER_LEFT();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c73); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseNUMBER() {\n        var s0, s1, s2;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c77.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c78); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c77.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c78); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c79();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c76); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseBRACED() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parseESCAPED_CHAR();\n        if (s3 === peg$FAILED) {\n          if (peg$c81.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c82); }\n          }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseESCAPED_CHAR();\n          if (s3 === peg$FAILED) {\n            if (peg$c81.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c14;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseBRACED();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s6 = peg$c16;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseBRACED();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c80); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseQUOTED() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parseESCAPED_CHAR();\n        if (s3 === peg$FAILED) {\n          if (peg$c84.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c85); }\n          }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseESCAPED_CHAR();\n          if (s3 === peg$FAILED) {\n            if (peg$c84.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c85); }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c14;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseBRACED();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s7 = peg$c16;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseQUOTED();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c83); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseESCAPED_CHAR() {\n        var s0;\n\n        if (input.substr(peg$currPos, 2) === peg$c86) {\n          s0 = peg$c86;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c87); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c88) {\n            s0 = peg$c88;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c89); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c90) {\n              s0 = peg$c90;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c91); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c92) {\n                s0 = peg$c92;\n                peg$currPos += 2;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c93); }\n              }\n            }\n          }\n        }\n\n        return s0;\n      }\n\n      function peg$parse_() {\n        var s0, s1;\n\n        peg$silentFails++;\n        s0 = [];\n        if (peg$c95.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c96); }\n        }\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c95.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c94); }\n        }\n\n        return s0;\n      }\n\n      function peg$parseLINE_END() {\n        var s0, s1;\n\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c98;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c99); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c100) {\n            s0 = peg$c100;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c101); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 13) {\n              s0 = peg$c102;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c103); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 8232) {\n                s0 = peg$c104;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c105); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 8233) {\n                  s0 = peg$c106;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c107); }\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  peg$silentFails++;\n                  if (input.length > peg$currPos) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                  }\n                  peg$silentFails--;\n                  if (s1 === peg$FAILED) {\n                    s0 = void 0;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c97); }\n        }\n\n        return s0;\n      }\n\n\n        const parseNumber = str => {\n          switch (options.number) {\n            case 'string':\n              return str;\n            case 'number':\n              return parseInt(str, 10);\n            case 'bigint':\n              return BigInt(str);\n            default:\n              const n = parseInt(str, 10);\n              if (n > Number.MAX_SAFE_INTEGER) return BigInt(str);\n              return n;\n          }\n        };\n\n\n      peg$result = peg$startRuleFunction();\n\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse:       peg$parse\n    };\n  })();\n\n  /* jshint node: true, esversion: 6, unused: true */\n\n  const STRINGS = {\n  \tjan: 'January',\n  \tfeb: 'February',\n  \tmar: 'March',\n  \tapr: 'April',\n  \tmay: 'May',\n  \tjun: 'June',\n  \tjul: 'July',\n  \taug: 'August',\n  \tsep: 'September',\n  \toct: 'October',\n  \tnov: 'November',\n  \tdec: 'December'\n  };\n\n  const parse = (str, options) => parser.parse(str, options);\n\n  const stripMatchingBraces = str => {\n  \t// remove matching curly braces, excluding escaped braces\n  \twhile (str.match(/(^|[^\\\\])\\{.*?([^\\\\])\\}/s)) {\n  \t\tstr = str.replace(/(^|[^\\\\])\\{(.*?)([^\\\\])\\}/s, '$1$2$3');\n  \t}\n  \treturn str;\n  };\n\n  const entries = (str, options) => {\n  \tlet items = parse(str, options),\n  \t\tentries = [],\n  \t\tstrings = { ...STRINGS },\n  \t\tevaluate = (datatype, value) => {\n  \t\t\tif (datatype === 'number') {\n  \t\t\t\treturn value;\n  \t\t\t} else if (datatype === 'quoted' || datatype === 'braced') {\n  \t\t\t\treturn stripMatchingBraces(value).replace(/\\\\([\"'%@{}()_])/g, '$1'); // unescape characters\n  \t\t\t} else if (datatype === 'identifier') {\n  \t\t\t\treturn strings[value] || '';\n  \t\t\t} else if (datatype === 'concatinate') {\n  \t\t\t\treturn value\n  \t\t\t\t\t.map(({ datatype, value }) => evaluate(datatype, value))\n  \t\t\t\t\t.join('');\n  \t\t\t} else if (datatype === 'null') {\n  \t\t\t\treturn null;\n  \t\t\t}\n  \t\t};\n  \tfor (let item of items) {\n  \t\tif (item.itemtype === 'string') {\n  \t\t\tstrings[item.name] = evaluate(item.datatype, item.value);\n  \t\t} else if (item.itemtype === 'entry') {\n  \t\t\tlet entry = { key: item.key, type: item.type };\n  \t\t\tfor (let field of item.fields) {\n  \t\t\t\tentry[field.name.toUpperCase()] = evaluate(field.datatype, field.value);\n  \t\t\t}\n  \t\t\tentries.push(entry);\n  \t\t}\n  \t}\n  \treturn entries;\n  };\n\n  var index = { parse, entries };\n\n  exports.default = index;\n  exports.entries = entries;\n  exports.parse = parse;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n//# sourceURL=webpack://white-paper/./node_modules/bibtex-parse/bibtex-parse.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var bibtex_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bibtex-parse */ \"./node_modules/bibtex-parse/bibtex-parse.js\");\n/* harmony import */ var bibtex_parse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bibtex_parse__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst res = bibtex_parse__WEBPACK_IMPORTED_MODULE_0___default().entries(`\n@preamble{\"Reference list\"}\n@string{ian = \"Brown, Ian\"}\n@string{jane = \"Woods, Jane\"}\n%references\n@inproceedings{Smith2009,\n  author=jane,\n  year=2009,\n  month=dec,\n  title={{Quantum somethings}},\n  journal={Journal of {B}lah}\n}\n \n@book{IP:1990,\nauthor = ian # \" and \" # jane,\nyear = {1990},\ntitle = {Methods for Research}\n}\n`);\nconsole.log(res)\n\n//# sourceURL=webpack://white-paper/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;